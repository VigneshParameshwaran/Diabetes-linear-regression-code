import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.metrics import mean_squared_error

# Load the diabetes dataset
diabetes = load_diabetes()
X, y = diabetes.data, diabetes.target

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train Linear Regression model
lr = LinearRegression()
lr.fit(X_train_scaled, y_train)
y_pred_lr = lr.predict(X_test_scaled)
mse_lr = mean_squared_error(y_test, y_pred_lr)

# Train Ridge Regression model
ridge = Ridge(alpha=1.0)
ridge.fit(X_train_scaled, y_train)
y_pred_ridge = ridge.predict(X_test_scaled)
mse_ridge = mean_squared_error(y_test, y_pred_ridge)

# Train Lasso Regression model
lasso = Lasso(alpha=0.1)
lasso.fit(X_train_scaled, y_train)
y_pred_lasso = lasso.predict(X_test_scaled)
mse_lasso = mean_squared_error(y_test, y_pred_lasso)

# Print MSE for each model
print(f"Linear Regression MSE: {mse_lr}")
print(f"Ridge Regression MSE: {mse_ridge}")
print(f"Lasso Regression MSE: {mse_lasso}")

# Plot coefficients
plt.figure(figsize=(12, 6))
plt.plot(lr.coef_, label='Linear Regression')
plt.plot(ridge.coef_, label='Ridge Regression')
plt.plot(lasso.coef_, label='Lasso Regression')
plt.xlabel('Feature index')
plt.ylabel('Coefficient value')
plt.legend()
plt.title('Coefficient comparison')
plt.show()

# Plot predictions
plt.figure(figsize=(12, 6))
plt.plot(y_test, label='True values')
plt.plot(y_pred_lr, label='Linear Regression predictions', alpha=0.7)
plt.plot(y_pred_ridge, label='Ridge Regression predictions', alpha=0.7)
plt.plot(y_pred_lasso, label='Lasso Regression predictions', alpha=0.7)
plt.xlabel('Sample index')
plt.ylabel('Diabetes progression')
plt.legend()
plt.title('Model predictions comparison')
plt.show()
